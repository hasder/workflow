package abc;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

import javax.net.ssl.SSLContext;

import org.apache.http.ExceptionLogger;
import org.apache.http.HttpConnection;
import org.apache.http.HttpException;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.MethodNotSupportedException;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.nio.bootstrap.HttpServer;
import org.apache.http.impl.nio.bootstrap.ServerBootstrap;
import org.apache.http.impl.nio.reactor.IOReactorConfig;
import org.apache.http.nio.entity.NStringEntity;
import org.apache.http.nio.protocol.BasicAsyncRequestConsumer;
import org.apache.http.nio.protocol.BasicAsyncResponseProducer;
import org.apache.http.nio.protocol.HttpAsyncExchange;
import org.apache.http.nio.protocol.HttpAsyncRequestConsumer;
import org.apache.http.nio.protocol.HttpAsyncRequestHandler;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.HttpCoreContext;

import com.google.gson.Gson;

import it.eng.productunithubledgerclient.base.BlockchainFactory;
import it.eng.productunithubledgerclient.base.LedgerClient;
import it.eng.productunithubledgerclient.exception.ProductUnitHubException;
import it.eng.productunithubledgerclient.model.ChassisDTO;
import it.eng.productunithubledgerclient.model.EquipmentRequirement;
import it.eng.productunithubledgerclient.model.EquipmentSpecification;
import it.eng.productunithubledgerclient.model.InstructionText;
import it.eng.productunithubledgerclient.model.Operation;
import it.eng.productunithubledgerclient.model.OperationStep;
import it.eng.productunithubledgerclient.model.ProcessStep;
import it.eng.productunithubledgerclient.model.WorkcellResource;

/**
 * Hello world!
 *
 */
public class App {
	LedgerClient ledgerClient;

	private static App app ;
	
	public static void main(String[] args) throws ProductUnitHubException {

		System.out.println("Hello World!");
		try {
			app = new App();
			app.storeProductionOrder();
			
//			app.getProductionOrder("A   819631","CTPP-01A");
//			app.startServiceProvider();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public App() throws ProductUnitHubException {

		BlockchainFactory factory = new BlockchainFactory();
		ledgerClient = factory.getType();
	}
	
	
	public void startServiceProvider() throws Exception {

		int port = 8090;

		SSLContext sslContext = null;

		final IOReactorConfig config = IOReactorConfig.custom().setSoTimeout(15000).setTcpNoDelay(true).build();

		final HttpServer server = ServerBootstrap.bootstrap().setListenerPort(port).setServerInfo("Test/1.1")
				.setIOReactorConfig(config).setSslContext(sslContext).setExceptionLogger(ExceptionLogger.STD_ERR)
				.registerHandler("*", new HttpRequestHandler()).create();

		server.start();
		System.out.println("Serving service on " + server.getEndpoint().getAddress()
				+ (sslContext == null ? "" : " with " + sslContext.getProvider() + " " + sslContext.getProtocol()));
		//server.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);

		Runtime.getRuntime().addShutdownHook(new Thread() {
			@Override
			public void run() {
				server.shutdown(5, TimeUnit.SECONDS);
			}
		});
	}

	class HttpRequestHandler implements HttpAsyncRequestHandler<HttpRequest> {


		String chassiId = "";
		String stationId = "";

		public HttpRequestHandler() {
			super();
		}

		public HttpAsyncRequestConsumer<HttpRequest> processRequest(final HttpRequest request,
				final HttpContext context) {
			// Buffer request content in memory for simplicity
			return new BasicAsyncRequestConsumer();
		}

		public void handle(final HttpRequest request, final HttpAsyncExchange httpexchange, final HttpContext context)
				throws HttpException, IOException {
			final HttpResponse response = httpexchange.getResponse();
			handleInternal(request, response, context);
			httpexchange.submitResponse(new BasicAsyncResponseProducer(response));
		}

		private void handleInternal(final HttpRequest request, final HttpResponse response, final HttpContext context)
				throws HttpException, IOException {

			final String method = request.getRequestLine().getMethod().toUpperCase(Locale.ENGLISH);
			if (!method.equals("GET") && !method.equals("HEAD") && !method.equals("POST")) {
				throw new MethodNotSupportedException(method + " method not supported");
			}

			//final String target = request.getRequestLine().getUri();			

			Collection<ProcessStep> processStepCollection1 = null;

			
			try {
				URIBuilder builder = new URIBuilder(request.getRequestLine().getUri());
				// get back the url parameters   
				List<NameValuePair> params = builder.getQueryParams();

				params.forEach(new Consumer<NameValuePair>() {
					@Override
					public void accept(NameValuePair namevaluepair) {
						System.out.println("name : " + namevaluepair.getName() + " value : " + namevaluepair.getValue());
						if("chassiid".equals(namevaluepair.getName())){
							chassiId = namevaluepair.getValue();
							System.out.println("Found chassiid!! length = " + chassiId.length());
						} else if("stationid".equals(namevaluepair.getName())){
							stationId = namevaluepair.getValue();
							System.out.println("Found stationid!! length = " + stationId.length());
						}
					}
				});
				
				
				
				
				
				
				processStepCollection1 = getProductionOrder(chassiId, stationId);
				
				
				
				//processStepCollection1 = buildChassisDTO().getBillOfProcessSteps().;
				
				
				
			} catch (ProductUnitHubException | URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			final HttpCoreContext coreContext = HttpCoreContext.adapt(context);
			final HttpConnection conn = coreContext.getConnection(HttpConnection.class);
			response.setStatusCode(HttpStatus.SC_OK);
			final NStringEntity body = new NStringEntity(new Gson().toJson(processStepCollection1));//"{\"Response from service\":\"work\",\"target\":\"" + target + "\"}", ContentType.APPLICATION_JSON);
			response.setEntity(body);
			System.out.println(conn + ": sending a json string entity ");
		}

	}
	
	
		
	
	
	
	

	//private Collection<ProcessStep> getProductionOrder() throws ProductUnitHubException {
	private Collection<ProcessStep> getProductionOrder(String chassiId, String stationId) throws ProductUnitHubException {
		// ProxyConfig.setProxy();

		System.out.println("getProductionOrder!!");

		Collection<ProcessStep> processStepCollection1 = ledgerClient.getProcessStep(chassiId, "VE", " ", stationId);

		Iterator<ProcessStep> i = processStepCollection1.iterator();
		while (i.hasNext())
		  {
			ProcessStep name = i.next();
		    System.out.println("process step name = " + name.getName());
		  
		}
		return processStepCollection1;
	}

	private void storeProductionOrder() throws ProductUnitHubException {
		
		// ProxyConfig.setProxy();

		System.out.println("storeProductionOrder!!");

		// full args
		Collection<ChassisDTO> chassisDTOCollection = new ArrayList<>();
		final ChassisDTO chassisDTO = buildChassisDTO();
		chassisDTOCollection.add(chassisDTO);
		ledgerClient.storeProcessStepRouting(chassisDTOCollection);
	}

	private static int getNextInt() {
		Random rand = new Random();
		return rand.nextInt(100);
	}

	private static ChassisDTO buildChassisDTO() {
		ChassisDTO chassisDTO = new ChassisDTO();
		chassisDTO.setChassisId("A   819631");
		chassisDTO.setComponent("VE");
		chassisDTO.setSubComponent(" ");

		ProcessStep processStep = new ProcessStep();
		processStep.setId("001_8415E5D-47A2-4E79-BF1C-1F56B105AC6-" + getNextInt());
		processStep.setName("WheelAlignment");
		processStep.setSequenceNo(0);

		WorkcellResource workcellResource = new WorkcellResource();
		workcellResource.setId("CTPP-01A");
		processStep.setWorkcellResource(workcellResource);

		Operation operation = new Operation();
		operation.setId("");
		
		List <InstructionText> texts = new ArrayList <InstructionText> ();
		InstructionText text = new InstructionText();
		text.setSequenceNo(0);
		text.setText("Perform Nutrunner job");
		texts.add(text);
		operation.setInstructionTexts(texts);
		
		
		List <EquipmentSpecification> equipmentSpecifications = new ArrayList <EquipmentSpecification> ();
		EquipmentSpecification equipmentSpecification = new EquipmentSpecification();
		equipmentSpecification.setSequenceNo(0);
		equipmentSpecification.setQuantity(5);
		
		
		List <EquipmentRequirement> equipmentRequirements = new ArrayList <EquipmentRequirement> ();
		EquipmentRequirement equipmentRequirement = new EquipmentRequirement();
		equipmentRequirement.setSequenceNo(0);
		equipmentRequirement.setSpecifications(equipmentSpecifications);
		
		operation.setEquipmentRequirements(equipmentRequirements);
		
		List <OperationStep> operationSteps = new ArrayList<OperationStep>();
		OperationStep operationStep = new OperationStep() ;
		operationStep.setDescription("OperationStep: Nutrunner engage");
		operationStep.setSequenceNo(0);
		
		operationSteps.add(operationStep);
		operation.setOperationSteps(operationSteps);
		
		
		List <Operation> billofOperations = new ArrayList<Operation>();
		billofOperations.add(operation);
		processStep.setBillOfOperation(billofOperations);
		
		ArrayList<ProcessStep> processStepCollection = new ArrayList<>();
		processStepCollection.add(processStep);
		chassisDTO.getBillOfProcessSteps().add(processStep);

		return chassisDTO;
	}

}
