package org.kit.workflow;

import java.io.IOException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;

/*
 * ProductionorderService
 * Description: This service will consume the production order service of the intelligent product.
 * 
 */

public class ProductionorderService {

	String providerEndpoint = "";

	Consumer consumer = new Consumer();
	Thread consumerThread = new Thread(consumer);
	
	
	public ProductionorderService(String endpoint){
		this.providerEndpoint = endpoint;
		
		
	}
	
	public void startServiceConsumer() {
		consumerThread.start();
	}
	
	public void setProviderEndpoint(String endpoint) {
		this.providerEndpoint = endpoint;
	}

	List<String> queueue = Collections.synchronizedList(new LinkedList<String>());

	public boolean getProductionOrder() {

		System.out.println("getProductionOrder");
		// make a linkedlist queue
		queueue.add("true");
		// add the get production order request ot he queue
		// make a separate thread that will dequeue the request and send the get
		// request to the intelligent product
		// it will then update the statemachineblablabla

		return true;

	}

	private class Consumer implements Runnable {

		@Override
		public void run() {

			if (!queueue.isEmpty()) {
				System.out.println("Consumer !queueue.isEmpty()");
				queueue.remove(0);//remove the first one
				String srurl = providerEndpoint;
				try {
					HttpClient httpClient = HttpClientBuilder.create().build();
					HttpGet getRequest = new HttpGet(srurl);
					getRequest.addHeader("accept", "application/json");

					HttpResponse response = httpClient.execute(getRequest);

					System.out.println("Response Code : " + response.getStatusLine().getStatusCode());

					if (response.getStatusLine().getStatusCode() != 200) {
						throw new RuntimeException(
								"Failed : HTTP error code : " + response.getStatusLine().getStatusCode());
					}
					System.out.println("body: " + EntityUtils.toString(response.getEntity()));

				} catch (ClientProtocolException e) {

					e.printStackTrace();

				} catch (IOException e) {

					e.printStackTrace();
				}
			} else {
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

		}

	}

}
